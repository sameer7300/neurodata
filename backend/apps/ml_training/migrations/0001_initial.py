# Generated by Django 5.2.6 on 2025-09-21 14:41

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('datasets', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MLAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('algorithm_type', models.CharField(choices=[('classification', 'Classification'), ('regression', 'Regression'), ('clustering', 'Clustering'), ('dimensionality_reduction', 'Dimensionality Reduction'), ('deep_learning', 'Deep Learning')], max_length=30)),
                ('description', models.TextField()),
                ('library', models.CharField(max_length=50)),
                ('class_name', models.CharField(max_length=100)),
                ('parameters_schema', models.JSONField(default=dict)),
                ('default_parameters', models.JSONField(default=dict)),
                ('min_memory_mb', models.PositiveIntegerField(default=512)),
                ('min_cpu_cores', models.PositiveIntegerField(default=1)),
                ('supports_gpu', models.BooleanField(default=False)),
                ('cost_per_hour', models.DecimalField(decimal_places=8, default=Decimal('0.01000000'), max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'ML Algorithm',
                'verbose_name_plural': 'ML Algorithms',
                'db_table': 'ml_algorithms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrainedModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('model_file', models.FileField(upload_to='trained_models/')),
                ('model_size_bytes', models.BigIntegerField()),
                ('model_format', models.CharField(max_length=50)),
                ('metrics', models.JSONField(default=dict)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('for_sale', 'For Sale')], default='private', max_length=20)),
                ('price', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), max_digits=20)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('rating_average', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3)),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trained_models', to='ml_training.mlalgorithm')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trained_models', to=settings.AUTH_USER_MODEL)),
                ('source_dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trained_models', to='datasets.dataset')),
            ],
            options={
                'verbose_name': 'Trained Model',
                'verbose_name_plural': 'Trained Models',
                'db_table': 'ml_trained_models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelInference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('input_data', models.JSONField()),
                ('input_file', models.FileField(blank=True, null=True, upload_to='inference_inputs/')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('predictions', models.JSONField(blank=True, default=dict)),
                ('confidence_scores', models.JSONField(blank=True, default=dict)),
                ('processing_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_inferences', to=settings.AUTH_USER_MODEL)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inferences', to='ml_training.trainedmodel')),
            ],
            options={
                'verbose_name': 'Model Inference',
                'verbose_name_plural': 'Model Inferences',
                'db_table': 'ml_model_inferences',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('parameters', models.JSONField(default=dict)),
                ('train_test_split', models.FloatField(default=0.8, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.9)])),
                ('random_seed', models.PositiveIntegerField(default=42)),
                ('max_runtime_hours', models.PositiveIntegerField(default=24)),
                ('memory_limit_mb', models.PositiveIntegerField(default=2048)),
                ('cpu_cores', models.PositiveIntegerField(default=2)),
                ('use_gpu', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('created', 'Created'), ('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='created', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('progress_percentage', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('model_file', models.FileField(blank=True, null=True, upload_to='trained_models/')),
                ('model_metrics', models.JSONField(blank=True, default=dict)),
                ('training_logs', models.TextField(blank=True)),
                ('actual_runtime_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('peak_memory_usage_mb', models.PositiveIntegerField(blank=True, null=True)),
                ('estimated_cost', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), max_digits=10)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('error_traceback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='ml_training.mlalgorithm')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='datasets.dataset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Job',
                'verbose_name_plural': 'Training Jobs',
                'db_table': 'ml_training_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='trainedmodel',
            name='training_job',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='trained_model', to='ml_training.trainingjob'),
        ),
        migrations.CreateModel(
            name='ComputeResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('cpu_cores', models.PositiveIntegerField()),
                ('memory_gb', models.PositiveIntegerField()),
                ('gpu_count', models.PositiveIntegerField(default=0)),
                ('gpu_type', models.CharField(blank=True, max_length=100)),
                ('storage_gb', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('available', 'Available'), ('busy', 'Busy'), ('maintenance', 'Maintenance'), ('offline', 'Offline')], default='available', max_length=20)),
                ('total_jobs_completed', models.PositiveIntegerField(default=0)),
                ('total_runtime_hours', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('current_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_resource', to='ml_training.trainingjob')),
            ],
            options={
                'verbose_name': 'Compute Resource',
                'verbose_name_plural': 'Compute Resources',
                'db_table': 'ml_compute_resources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('queue_position', models.PositiveIntegerField()),
                ('estimated_start_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('training_job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='queue_entry', to='ml_training.trainingjob')),
            ],
            options={
                'verbose_name': 'Training Queue Entry',
                'verbose_name_plural': 'Training Queue Entries',
                'db_table': 'ml_training_queue',
                'ordering': ['queue_position'],
            },
        ),
        migrations.AddIndex(
            model_name='trainingjob',
            index=models.Index(fields=['user', 'status'], name='ml_training_user_id_09e6da_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingjob',
            index=models.Index(fields=['status', 'priority', 'created_at'], name='ml_training_status_e72b5e_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingjob',
            index=models.Index(fields=['algorithm', 'status'], name='ml_training_algorit_e34684_idx'),
        ),
    ]
